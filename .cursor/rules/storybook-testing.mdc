---
description: 
globs: **/*.stories.tsx,apps/docs/**/*.mdx
alwaysApply: false
---

You are an expert in Storybook, Playwright testing, React, TypeScript, react-hook-form, @medusajs/ui, Zod validation, and the lambda-curry/medusa-forms monorepo architecture.

# Project Context
This is a monorepo containing form components with comprehensive Storybook interaction testing. The testing setup combines Storybook's component isolation with modern interaction testing patterns using play functions and the @storybook/test utilities.

## Key Technologies
- Storybook 9.0.6 with React and Vite
- @storybook/test for interaction testing utilities (userEvent, expect, canvas)
- @storybook/test-runner for Playwright automation
- react-hook-form + @medusajs/ui for Medusa Forms components
- Zod validation for form validation testing
- Yarn 4.7.0 with corepack
- TypeScript throughout

### Local Development Workflow
```bash
# Local development commands
cd apps/docs
yarn dev                 # Start Storybook for development
yarn test:local         # Run tests against running Storybook (if available)

# Local testing of built Storybook
yarn build              # Build static Storybook
node simple-server.js & # Start custom server
npx test-storybook --url http://127.0.0.1:45678  # Test built version
```

### Codegen Testing Workflow
This setup is optimized for Codegen agents and local development testing:
```bash
# Codegen workflow for testing built Storybook
cd apps/docs
yarn install
npx playwright install
npx playwright install-deps
yarn build
node simple-server.js &
npx test-storybook --url http://127.0.0.1:45678
```

## Project Structure
```
lambda-curry/medusa-forms/
‚îú‚îÄ‚îÄ apps/docs/                    # Storybook app
‚îÇ   ‚îú‚îÄ‚îÄ .storybook/              # Storybook configuration
‚îÇ   ‚îú‚îÄ‚îÄ src/medusa-forms/        # Medusa Forms story files with tests
‚îÇ   ‚îú‚îÄ‚îÄ simple-server.js         # Custom static server for testing
‚îÇ   ‚îî‚îÄ‚îÄ package.json             # Test scripts
‚îú‚îÄ‚îÄ packages/medusa-forms/       # Medusa Forms component library
‚îÇ   ‚îî‚îÄ‚îÄ src/
‚îÇ       ‚îú‚îÄ‚îÄ controlled/          # Controlled components using react-hook-form
‚îÇ       ‚îî‚îÄ‚îÄ ui/                  # UI components using @medusajs/ui
‚îî‚îÄ‚îÄ .cursor/rules/               # Cursor rules directory
```

# Modern Storybook Interaction Testing

## Core Principles
- **Stories as Tests**: Every story can be a render test; complex stories include interaction tests
- **Play Functions**: Use play functions to simulate user behavior and assert on results
- **Canvas Queries**: Use Testing Library queries through the canvas parameter
- **User Events**: Simulate real user interactions with userEvent
- **Step Grouping**: Organize complex interactions with the step function
- **Visual Debugging**: Debug tests visually in the Storybook UI

## Essential Imports for Interaction Testing
```typescript
import type { Meta, StoryObj } from '@storybook/react';
import { expect, userEvent, within } from '@storybook/test';
import { FormProvider, useForm } from 'react-hook-form';
```

## Story Structure with Play Functions

### Basic Interaction Test Pattern
```typescript
export const FilledForm: Story = {
  play: async ({ canvas, userEvent }) => {
    // üëá Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');
    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');
    
    // üëá Trigger form submission
    await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
    
    // üëá Assert DOM structure
    await expect(
      canvas.getByText('Form submitted successfully!')
    ).toBeInTheDocument();
  },
};
```

### Advanced Pattern with Step Grouping
```typescript
export const CompleteWorkflow: Story = {
  play: async ({ canvas, userEvent, step }) => {
    await step('Fill out form fields', async () => {
      await userEvent.type(canvas.getByLabelText('Email'), 'user@example.com');
      await userEvent.type(canvas.getByLabelText('Password'), 'securepassword');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
    });

    await step('Verify success state', async () => {
      await expect(
        canvas.getByText('Welcome! Your account is ready.')
      ).toBeInTheDocument();
    });
  },
};
```

## Testing Patterns

### User Interaction Best Practices
```typescript
// ‚úÖ ALWAYS click before clearing inputs
await userEvent.click(input);
await userEvent.clear(input);
await userEvent.type(input, 'new value');

// ‚úÖ Use findBy* for async elements
const message = await canvas.findByText('Success message');
expect(message).toBeInTheDocument();

// ‚úÖ Use queryBy* to check non-existence
expect(canvas.queryByText('Should not exist')).not.toBeInTheDocument();
```

### Three-Phase Test Structure
```typescript
export const Default: Story = {
  play: async (storyContext) => {
    // Phase 1: Test initial state
    testDefaultValues(storyContext);
    
    // Phase 2: Test validation/error states
    await testInvalidSubmission(storyContext);
    
    // Phase 3: Test success scenarios
    await testValidSubmission(storyContext);
  },
  decorators: [withReactRouterStubDecorator({ /* config */ })],
};
```

### React Router Stub Decorator
```typescript
withReactRouterStubDecorator({
  routes: [{
    path: '/',
    Component: ControlledComponentExample,
    action: async ({ request }) => {
      const { data, errors } = await getValidatedFormData<FormData>(
        request, 
        zodResolver(formSchema)
      );
      if (errors) return { errors };
      return { message: 'Form submitted successfully' };
    },
  }],
})
```

## Deprecated Patterns - DO NOT USE

‚ùå **Never use getBy* for async elements**
```typescript
// BAD - will fail for async content
const message = canvas.getByText('Success message');
```

‚ùå **Never clear inputs without clicking first**
```typescript
// BAD - unreliable
await userEvent.clear(input);
```

‚ùå **Never use regular forms instead of fetcher.Form**
```typescript
// BAD - won't work with React Router stub
<form onSubmit={methods.handleSubmit}>
```

‚ùå **Never test multiple unrelated scenarios in one story**
```typescript
// BAD - stories should be focused
export const AllScenarios: Story = { /* testing everything */ };
```

## File Naming and Organization
- Story files: `component-name.stories.tsx` in `apps/docs/src/remix-hook-form/`
- Use kebab-case for file names
- Group related test functions together
- Export individual test functions for reusability

## Testing Utilities and Helpers

### Canvas Queries
```typescript
// Form elements
const input = canvas.getByLabelText('Field Label');
const button = canvas.getByRole('button', { name: 'Submit' });
const select = canvas.getByRole('combobox');

// Async content
const errorMessage = await canvas.findByText('Error message');
const successMessage = await canvas.findByText('Success');
```

### Common Test Patterns
```typescript
// Form validation testing
const testInvalidSubmission = async ({ canvas }: StoryContext) => {
  const submitButton = canvas.getByRole('button', { name: 'Submit' });
  await userEvent.click(submitButton);
  expect(await canvas.findByText('Field is required')).toBeInTheDocument();
};

// Conditional field testing
const testConditionalFields = async ({ canvas }: StoryContext) => {
  const trigger = canvas.getByLabelText('Show advanced options');
  expect(canvas.queryByLabelText('Advanced Field')).not.toBeInTheDocument();
  await userEvent.click(trigger);
  expect(canvas.getByLabelText('Advanced Field')).toBeInTheDocument();
};
```

## Performance and Best Practices

### Test Execution Optimization
- **Fast Feedback**: Tests should complete in under 10 seconds
- **Parallel Execution**: Leverage Playwright's parallel test execution
- **Focused Testing**: Each story should test one primary workflow
- **Efficient Selectors**: Use semantic queries (role, label) over CSS selectors

### Local Development Workflow
```bash
# Local development commands
cd apps/docs
yarn dev                 # Start Storybook for development
yarn test:local         # Run tests against running Storybook (if available)

# Local testing of built Storybook
yarn build              # Build static Storybook
node simple-server.js & # Start custom server
npx test-storybook --url http://127.0.0.1:45678  # Test built version
```

### Codegen Testing Workflow
This setup is optimized for Codegen agents and local development testing:
```bash
# Codegen workflow for testing built Storybook
cd apps/docs
yarn install
npx playwright install
npx playwright install-deps
yarn build
node simple-server.js &
npx test-storybook --url http://127.0.0.1:45678
```

## Advanced Testing Patterns

### Accessibility Testing
```typescript
// Include accessibility checks in stories
import { checkA11y } from '@storybook/addon-a11y';

export const AccessibilityTest: Story = {
  play: async (storyContext) => {
    await checkA11y(storyContext.canvasElement);
    // Additional accessibility-specific tests
  },
};
```

### Visual Regression Testing
```typescript
// Use Playwright's screenshot capabilities
export const VisualTest: Story = {
  play: async ({ canvasElement }) => {
    // Interact with component to desired state
    // Screenshot will be taken automatically by test-runner
  },
};
```

### Cross-Browser Testing
```typescript
// Configure multiple browsers in test-runner config
// Tests run automatically across Chromium, Firefox, WebKit
```

## Error Handling and Debugging

### Debug Mode
```bash
# Run tests with debug output
npx test-storybook --url http://127.0.0.1:45678 --verbose

# Run specific story
npx test-storybook --url http://127.0.0.1:45678 --testNamePattern="ComponentName"
```

### Common Error Patterns
1. **Element not found**: Use proper async queries (`findBy*`)
2. **Timing issues**: Add appropriate waits for async operations
3. **Form submission failures**: Verify fetcher setup and router configuration
4. **Port conflicts**: Use the custom static server solution

## Verification Checklist
When creating or modifying Storybook tests, ensure:

1. ‚úÖ Story includes all three test phases (default, invalid, valid)
2. ‚úÖ Uses React Router stub decorator for form handling
3. ‚úÖ Follows click-before-clear pattern for inputs
4. ‚úÖ Uses findBy* for async assertions
5. ‚úÖ Tests both client-side and server-side validation
6. ‚úÖ Includes proper error handling and success scenarios
7. ‚úÖ Story serves as both documentation and test
8. ‚úÖ Component is properly isolated and focused
9. ‚úÖ Tests complete in reasonable time (< 10 seconds)
10. ‚úÖ Uses semantic queries for better maintainability

## Team Workflow Integration

### Code Review Guidelines
- Verify test coverage includes happy path and error scenarios
- Ensure stories are self-documenting and demonstrate component usage
- Check that tests follow established patterns and conventions
- Validate that new tests don't introduce flaky behavior

### Local Development Focus
- This setup is designed for local development and Codegen testing
- Tests run against built Storybook static files for consistency
- Custom server resolves common port conflicts in development environments
- Fast feedback loop optimized for developer productivity

Remember: Every story should test real user workflows and serve as living documentation. Focus on behavior, not implementation details. The testing infrastructure should be reliable, fast, and easy to maintain for local development and Codegen workflows.

## Canvas Queries - Testing Library Integration

### Query Types and When to Use Them
| Query Type | 0 Matches | 1 Match | >1 Matches | Awaited | Use Case |
|------------|-----------|---------|------------|---------|----------|
| `getBy*` | Throw error | Return element | Throw error | No | Elements that should exist |
| `queryBy*` | Return null | Return element | Throw error | No | Elements that may not exist |
| `findBy*` | Throw error | Return element | Throw error | Yes | Async elements |
| `getAllBy*` | Throw error | Return array | Return array | No | Multiple elements |
| `queryAllBy*` | Return [] | Return array | Return array | No | Multiple elements (optional) |
| `findAllBy*` | Throw error | Return array | Return array | Yes | Multiple async elements |

### Query Priority (Recommended Order)
1. **ByRole** - Find elements by accessible role (most user-like)
2. **ByLabelText** - Find form elements by associated label
3. **ByPlaceholderText** - Find inputs by placeholder
4. **ByText** - Find elements by text content
5. **ByDisplayValue** - Find inputs by current value
6. **ByAltText** - Find images by alt text
7. **ByTitle** - Find elements by title attribute
8. **ByTestId** - Find by data-testid (last resort)

### Common Query Examples
```typescript
// Semantic queries (preferred)
const submitButton = canvas.getByRole('button', { name: 'Submit' });
const emailInput = canvas.getByLabelText('Email Address');
const dropdown = canvas.getByRole('combobox', { name: 'Country' });

// Async queries for dynamic content
const successMessage = await canvas.findByText('Form submitted successfully');
const errorList = await canvas.findAllByRole('alert');

// Conditional queries
const optionalField = canvas.queryByLabelText('Optional Field');
expect(optionalField).not.toBeInTheDocument();
```

## UserEvent Interactions

### Common UserEvent Methods
```typescript
// Clicking elements
await userEvent.click(element);
await userEvent.dblClick(element);

// Typing and input
await userEvent.type(input, 'text to type');
await userEvent.clear(input);
await userEvent.paste(input, 'pasted text');

// Keyboard interactions
await userEvent.keyboard('{Enter}');
await userEvent.tab();

// Selection
await userEvent.selectOptions(select, 'option-value');
await userEvent.deselectOptions(select, 'option-value');

// File uploads
await userEvent.upload(fileInput, file);

// Hover interactions
await userEvent.hover(element);
await userEvent.unhover(element);
```

### Form Interaction Best Practices
```typescript
// ‚úÖ ALWAYS click before clearing inputs (for focus)
await userEvent.click(input);
await userEvent.clear(input);
await userEvent.type(input, 'new value');

// ‚úÖ Use proper selection for dropdowns
await userEvent.click(canvas.getByRole('combobox'));
await userEvent.click(canvas.getByRole('option', { name: 'Option Text' }));

// ‚úÖ Handle file uploads properly
const file = new File(['content'], 'test.txt', { type: 'text/plain' });
await userEvent.upload(canvas.getByLabelText('Upload File'), file);
```

## Component Wrapper Pattern for Medusa Forms

### Controlled Component Setup
```typescript
const ControlledComponentExample = () => {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: { /* defaults */ },
  });

  return (
    <FormProvider {...form}>
      <form onSubmit={form.handleSubmit((data) => console.log(data))}>
        {/* Medusa Forms components */}
        <ControlledInput name="email" label="Email" />
        <ControlledSelect name="country" label="Country" options={countryOptions} />
        <Button type="submit">Submit</Button>
      </form>
    </FormProvider>
  );
};
```
